#include <stdio.h>
#include <stdlib.h>
typedef struct element {
    int val;
    struct element *suivant;
} element;
element *creerListe() {
    return NULL;
}
element *chargerListe(int *Tab, int taille) {
    element *tete = NULL;
    element *courant = NULL;
    for (int i = 0; i < taille; i++) {
        element *nouveau = (element *)malloc(sizeof(element));
        nouveau->val = Tab[i];
        nouveau->suivant = NULL;
        if (tete == NULL) { 
            tete = nouveau;
        } else {
            courant->suivant = nouveau;
        }
        courant = nouveau;
    }
    return tete;
}
void afficherListe(element *L) {
    element *courant = L;
    while (courant != NULL) { 
        printf("%d", courant->val);
        if (courant->suivant != NULL) {
            printf("->");
        }
        courant = courant->suivant;
    }
    printf("->NULL\n");
}
element *supprimerEnFin(element *L) {
    if (L == NULL) { 
        return NULL;
    }
    if (L->suivant == NULL) {
        free(L);
        return NULL; 
    }
    element *courant = L; 
    while (courant->suivant->suivant != NULL) {
        courant = courant->suivant;
    }
    free(courant->suivant); 
    courant->suivant = NULL; 
    return L; 
}
element *ajouterEnDebut(element *L, int val) {
    element *nouveau = (element *)malloc(sizeof(element));
    nouveau->val = val;
    nouveau->suivant = L;
    return nouveau;
}
void viderListe(element *L) {
    element *courant = L;
    while (courant != NULL) {
        element *temp = courant;
        courant = courant->suivant;
        free(temp);
    }
    printf("La liste est vide\n");
}
int main() {
    int Tab[10] = {1, 3, 5, 7, 8, 10, 9, 11, 13, 20};
    element *liste = creerListe();
    liste = chargerListe(Tab, 10);
    printf("Liste initiale: ");
    afficherListe(liste);
    liste = supprimerEnFin(liste);
    printf("Liste apres suppression en fin: ");
    afficherListe(liste); 
    liste = ajouterEnDebut(liste, 40);
    printf("Liste apres ajout en debut: ");
    afficherListe(liste);
    viderListe(liste);
    return 0;
}
